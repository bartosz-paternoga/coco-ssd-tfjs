{"version":3,"sources":["webcam.js","loader.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Webcam","width","height","window","matchMedia","matches","navigator","getUserMedia","video","facingMode","audio","a","document","querySelector","srcObject","Loader","modelLoad","getElementById","style","display","App","predict","_callee","model","predictions","regenerator_default","wrap","_context","prev","next","detect","sent","_this","renderPredictions","requestAnimationFrame","undefined","console","log","concat","class","score","stop","this","ctx","getContext","clearRect","canvas","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","_this2","_ref2","Object","asyncToGenerator","mark","_callee2","_context2","cocoSsd","apply","arguments","react_default","createElement","className","src","logo","alt","id","controls","autoPlay","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b462b686.chunk.js","sourcesContent":["\nconst Webcam = () =>{\n      let width;\n      let height;\n\n      if(window.matchMedia('(max-width: 767px)').matches) {\n             width = 340;\n             height = 552\n      } else {\n\n             width = 600;\n             height = 500\n      }\n\n        navigator.getUserMedia (\n\n          // constraints\n                {\n                  video: {\n                          facingMode: \"environment\",\n                          width: width,\n                          height: height\n                        },\n                   audio: false\n                },\n\n          // successCallback\n                function(a) {   \n                const video = document.querySelector('video');\n               \n                video.srcObject = a; \n\n                },\n\n          // errorCallback\n                function() {}\n\n        );\n\n      }\n\n\n\n\n\n\n\n    export default Webcam ","\nconst Loader = (modelLoad) =>{\n    \n            if (modelLoad !==\"\") {\n                const elem1 = document.getElementById('loading-message');\n                elem1.style.display = 'none';\n                const elem2 = document.getElementById('sk-cube-grid');\n                elem2.style.display = 'none';\n                const elem3= document.getElementById('video');\n                elem3.style.display = 'flex';\n\n                }\n\n    } \n\n\n    export default Loader ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport \"./App.css\";\nimport logo from './logo.svg'\nimport Webcam from './webcam';\nimport Loader from './loader';\n\nclass App extends React.Component {\n  componentDidMount() {\n\n    const video = document.getElementById(\"video\");\n    const canvas = document.getElementById(\"canvas\");\n\n    if(window.matchMedia('(max-width: 767px)').matches) {\n      video.width = 340;\n      video.height = 552\n      canvas.width = 340;\n      canvas.height = 552\n    } else {\n\n      video.width  = 600;\n      video.height = 500\n      canvas.width = 600;\n      canvas.height = 500\n    }\n\n    console.log(\" canvas.width \", canvas.width ,  \"canvas.height\" , canvas.height )\n\n    Webcam();\n\n\n    const a = async () => {\n        const model = await cocoSsd.load();\n        console.log(\"loaded\")\n                \n        console.log(\"MODEL LOADED\");\n        const modelLoad = \"LOADED\";\n        Loader(modelLoad);\n\n\n        this.predict(video, model);\n     }\n\n    a();\n\n\n  }\n\n  predict = async (video, model) => {\n \n      const predictions = await model.detect(video);\n\n      this.renderPredictions(predictions);\n\n      requestAnimationFrame(() => {\n        this.predict(video, model);\n        if (predictions[0] !== undefined) {\n           console.log(`Prediction ${predictions[0].class} ${predictions[0].score}`)\n        }\n      });\n\n  };\n\n  renderPredictions = predictions => {\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px courier\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"red\";\n      ctx.lineWidth = 3;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"black\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"white\";\n      ctx.fillText(prediction.class, x, y);\n    });\n\n\n\n\n\n    \n  };\n\n  render() {\n    return (\n      <div>\n            <div className=\"App\">\n              <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h3> This app is using coco-ssd model with tfjs to predict objects</h3>\n              </header>\n            </div>\n            <br/>\n            <div id=\"loading-message\">\n                <p>Face-api.js model is loading. This will take a few moments ...</p>\n                {/* <p>All good things come for those who wait</p> */}\n              </div>\n\t    \n            <div className=\"sk-cube-grid\" id=\"sk-cube-grid\">\n              <div className=\"sk-cube sk-cube1\"></div>\n              <div className=\"sk-cube sk-cube2\"></div>\n              <div className=\"sk-cube sk-cube3\"></div>\n              <div className=\"sk-cube sk-cube4\"></div>\n              <div className=\"sk-cube sk-cube5\"></div>\n              <div className=\"sk-cube sk-cube6\"></div>\n              <div className=\"sk-cube sk-cube7\"></div>\n              <div className=\"sk-cube sk-cube8\"></div>\n              <div className=\"sk-cube sk-cube9\"></div>\n            </div>\n\n          <video id=\"video\" controls autoPlay  />\n          <canvas id=\"canvas\"  />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}