{"version":3,"sources":["webcam.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Webcam","clientHeight","document","documentElement","console","log","window","matchMedia","matches","navigator","getUserMedia","video","facingMode","width","height","audio","a","querySelector","srcObject","App","predict","_callee","model","predictions","regenerator_default","wrap","_context","prev","next","detect","sent","_this","renderPredictions","requestAnimationFrame","undefined","concat","class","score","stop","this","ctx","getElementById","getContext","clearRect","canvas","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","_this2","_ref2","Object","asyncToGenerator","mark","_callee2","_context2","cocoSsd","apply","arguments","react_default","createElement","className","src","logo","alt","id","controls","autoPlay","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d10dccca.chunk.js","sourcesContent":["\nconst Webcam = () =>{\n      let width;\n      let height;\n      const clientHeight = document.documentElement.clientHeight;\n      console.log(\"clientHeight\",clientHeight)\n\n\n      if(window.matchMedia('(max-width: 767px)').matches) {\n             width = 340;\n             height = 552\n      } else {\n\n             width = 600;\n             height = 500\n      }\n\n        navigator.getUserMedia (\n\n          // constraints\n                {\n                  video: {\n                         facingMode: \"environment\",\n                          width: 600,\n                          height: 500\n                        },\n                   audio: false\n                },\n\n          // successCallback\n                function(a) {   \n                const video = document.querySelector('video');\n               \n                video.srcObject = a; \n\n                },\n\n          // errorCallback\n                function() {}\n\n        );\n\n      }\n\n\n\n\n\n\n\n    export default Webcam ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport \"./App.css\";\nimport logo from './logo.svg'\nimport Webcam from './webcam';\n\nclass App extends React.Component {\n  componentDidMount() {\n\n    const video = document.getElementById(\"video\");\n    const canvas = document.getElementById(\"canvas\");\n\n    if(window.matchMedia('(max-width: 767px)').matches) {\n      video.width  = 600;\n      video.height = 500\n      canvas.width = 600;\n      canvas.height = 500\n    } else {\n\n      video.width  = 600;\n      video.height = 500\n      canvas.width = 600;\n      canvas.height = 500\n    }\n\n    console.log(\" canvas.width \", canvas.width ,  \"canvas.height\" , canvas.height )\n\n    Webcam();\n\n\n    const a = async () => {\n        const model = await cocoSsd.load();\n        console.log(\"loaded\")\n                \n        this.predict(video, model);\n     }\n\n    a();\n\n\n  }\n\n  predict = async (video, model) => {\n \n      const predictions = await model.detect(video);\n\n      this.renderPredictions(predictions);\n\n      requestAnimationFrame(() => {\n        this.predict(video, model);\n        if (predictions[0] !== undefined) {\n           console.log(`Prediction ${predictions[0].class} ${predictions[0].score}`)\n        }\n      });\n\n  };\n\n  renderPredictions = predictions => {\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px courier\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n\n\n\n\n\n    \n  };\n\n  render() {\n    return (\n      <div>\n            <div className=\"App\">\n              <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h3> This app is using coco-ssd model with tfjs to predict objects</h3>\n              </header>\n            </div>\n\n        <video id=\"video\" controls autoPlay  />\n        <canvas id=\"canvas\"  />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}